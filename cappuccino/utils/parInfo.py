""" 
This is a file to keep various values for the caramel runs to be used in the
LAMP2011 paper.
"""

import constants as const


def caramelNameToPythonName():
    name_map = {
        'logMbh': 'log10Mbh',
        'thetai': 'Thetai',
        'thetao': 'Thetao',
        'beta': 'Beta',
        'mu': 'Mu',
        'F': 'F',
        'rmax': 'Rmax',
        'xi': 'Xi',
        'kappa': 'Kappa',
        'gamma': 'Gamma',
        'fflow': 'Fflow',
        'fellip': 'Fellip',
        'ellipseAngle': 'Thetae',
        'turbulence': 'Sigmaturb',
        'Cadd': 'Cadd',
        'Cmult': 'Cmult',
        'radial_sd_flowing': 'radial_sd_flowing',
        'radial_sd_orbiting': 'radial_sd_orbiting',
        'angular_sd_orbiting': 'angular_sd_orbiting',
        'angular_sd_flowing': 'angular_sd_flowing',
    }
    return name_map


def paramScalesCARAMELOut():
    # Scaling factors for each parameter in the CARAMEL output files
    param_scales = {
        'Mbh': 1. / const.Msun,
        'mu': 1. / (const.c * const.day),
        'Beta': 1.,
        'F': 1.,
        'Thetao': (180. / const.pi),
        'Thetai': (180. / const.pi),
        'Kappa': 1.,
        'Xi': 1.,
        'Gamma': 1.,
        'Cadd': 1.,
        'Cmult': 1.,
        'Fellip': 1.,
        'Fflow': 1.,
        'angular_sd_orbiting': 1.,
        'radial_sd_orbiting': 1.,
        'angular_sd_flowing': 1.,
        'radial_sd_flowing': 1.,
        'Sigmaturb': 1.,
        'Thetae': (180. / const.pi),
        'narrow_line_flux': 1.,
        'narrow_line_flux_nii': 1.,
        'Blurring': 1.,
        'Rmean': 1. / (const.c * const.day),
        'Rmedian': 1. / (const.c * const.day),
        'Taumean': 1. / const.day, 
        'Taumedian': 1. / const.day, 
        'NarrowLineCenter': 1.,
        'Rmax': 1.,
        'Cion': 1.,
        'Cmult1': 1.,
        'Cmult2': 1.,
        'epsilon_zero': 1.,
        'alpha': 1.,
    }
    return param_scales


def paramNamesCARAMELOut():
    # LaTeX names for each parameter in the CARAMEL output files
    param_names = {
        'Mbh': "$M_{\\rm bh}/M_{\\odot}$",
        'mu': "$\\mu \\, \\, \\, (ld)$",
        'Beta': "$\\beta$",
        'F': "$F$",
        'Thetao': "$\\rm Opening \\, \\, \\, Angle \\, \\, \\, [deg]$",
        'Thetai': "$\\rm Inclination \\, \\, \\, Angle \\, \\, \\,[deg]$",
        'Kappa': "$\\kappa$",
        'Xi': "$\\rm Slab \\,\\,\\,Transparency$",
        'Gamma': "$\\rm Bend$",
        'Cadd': "$\\rm Cadd$", 
        'Cmult': "$\\rm Cmult$",
        'Fellip': "$\\rm CircularLike \\,\\,\\, Fraction$",
        'Fflow': "$\\rm Inflow-Outflow \\,\\,\\, Fraction$",
        'angular_sd_orbiting': "$\\rm angular\\_sd\\_orbiting$",
        'radial_sd_orbiting': "$\\rm radial\\_sd\\_orbiting$",
        'angular_sd_flowing': "$\\rm angular\\_sd\\_flowing$",
        'radial_sd_flowing': "$\\rm radial\\_sd\\_flowing$",
        'Sigmaturb': "$\\rm Turbulence$",
        'Thetae': "$\\rm EllipseAngle$",
        'narrow_line_flux': "$\\rm Narrow \\,\\,\\, Line \\,\\,\\, Flux$",
        'narrow_line_flux_nii': "$\\rm Narrow \\,\\,\\, Line \\,\\,\\, Flux \\, NII$",
        'Blurring': "$\\rm Blurring$",
        'Rmean': "$r_{\\rm mean}$",
        'Rmedian': "$r_{\\rm median}$",
        'Rmax': "$r_{\\rm max}$",
        'Taumean': "$\\tau_{\\rm mean}$",
        'Taumedian': "$\\tau_{\\rm median}$",
        'NarrowLineCenter': "$\\rm Narrow$ $\\rm Line$ $\\rm Center$ $\\rm (\\AA)$",
        'Cmult1': "$\\rm Cmult1$",
        'Cmult2': "$\\rm Cmult2$",
        'Cion': "$\\rm Cion$",
        'Cion': "$\\rm Cion$",   
        'epsilon_zero': "$\\varepsilon_0$",
        'alpha': "$\\alpha$", 
    }
    return param_names


def logifyCARAMELOut():
    # Whether or not the CARAMEL output parameters should be plotted on log scales
    logify = {
        'Mbh': True,
        'mu': False,
        'Beta': False,
        'F': False,
        'Thetao': False,
        'Thetai': False,
        'Kappa': False,
        'Xi': False,
        'Gamma': False,
        'Cadd': False,
        'Cmult': True,
        'Fellip': False,
        'Fflow': False,
        'angular_sd_orbiting': True,
        'radial_sd_orbiting': True,
        'angular_sd_flowing': True,
        'radial_sd_flowing': True,
        'Sigmaturb': False,
        'Thetae': False,
        'narrow_line_flux': True,
        'narrow_line_flux_nii': True,
        'Blurring': False,
        'Rmean': False,
        'Rmedian': False,
        'Taumean': False,
        'Taumedian': False,
        'NarrowLineCenter': False,
        'Rmax': False,
        'Cion': False,
        'Cmult1': True,
        'Cmult2': True,
        'epsilon_zero': True,
        'alpha': False, 
    }
    return logify


def paramTexNames():
    names = {
        "NarrowLineCenter": "${\\rm Narrow~Line~Center}$",
        "Blurring": "${\\rm Blurring}$",
        "Mu": "$\\mu$",
        "Cadd": "$C_{\\rm add}$",
        "Cmult": "$C_{\\rm mult}$",
        "Cadd_frac": "$C_{\\rm add}/\overline{C}$",
        'narrow_line_flux': "$\\rm Narrow \\,\\,\\, Line \\,\\,\\, Flux$",
        'narrow_line_flux_nii': "$\\rm Narrow \\,\\,\\, Line \\,\\,\\, Flux$ \\, NII",
        "mu": "$\\mu$",
        "F": "$F$",
        "alpha": "$\\alpha$",
        "Rmax": "$r_{\\rm max}$",
        "Rmean": "$r_{\\rm mean}$",
        "Rmedian": "$r_{\\rm median}$",
        "Rmin": "$r_{\\rm min}$",
        "Sigmar": "$\\sigma_r$",
        "Taumean": "$\\tau_{\\rm mean}$",
        "Taumedian": "$\\tau_{\\rm median}$",
        "Beta": "$\\beta$",
        "Thetao": "$\\theta_o$",
        "Thetai": "$\\theta_i$",
        "Kappa": "$\\kappa$",
        "Gamma": "$\\gamma$",
        "Xi": "$\\xi$",
        "Mbh": "$M_{\\rm bh}/M_{\\odot}$",
        "log10Mbh": "$\\log_{10}(M_{\\rm BH}/M_{\\odot})$",
        "MbhSinThetai": "$M_{\\rm bh}/M_{\\odot}\\cdot\\sin(\\theta_i)$",
        "Fellip": "$f_{\\rm ellip}$",
        "Fflow": "$f_{\\rm flow}$",
        "Thetae": "$\\theta_e$",
        "Sigmaturb": "$\\sigma_{\\rm turb}$",
        "log10f_rmssigma": "$\\log_{10}f_{ {\\rm rms},\sigma}$",
        "log10f_meansigma": "$\\log_{10}f_{ {\\rm mean},\sigma}$",
        "log10f_meanfwhm": "$\\log_{10}f_{ {\\rm mean},{\\rm FWHM} }$",
        "log10VP_rmssigma": "$\\log_{10}(M_{\\rm vir}/M_\odot)_{ {\\rm rms},\sigma}$",
        "log10VP_meansigma": "$\\log_{10}(M_{\\rm vir}/M_\odot)_{ {\\rm mean},\sigma}$",
        "log10VP_meanfwhm": "$\\log_{10}(M_{\\rm vir}/M_\odot)_{ {\\rm mean},{\\rm FWHM} }$",
        "log10fsigma_median": "$\\log_{10}f_{\sigma,{\\rm model}}$",
        "log10ffwhm_median": "$\\log_{10}f_{{\\rm fwhm},{\\rm model}}$",
        "log10fsigma_ccf": "$\\log_{10}f_{\sigma}$",
        "log10ffwhm_ccf": "$\\log_{10}f_{{\\rm fwhm}}$",
        "log10fmeansigma_ccf": "$\\log_{10}f_{{\\rm mean},\sigma}$",
        "log10frmssigma_ccf": "$\\log_{10}f_{{\\rm rms},\sigma}$",
        "log10fmeanfwhm_ccf": "$\\log_{10}f_{{\\rm mean},{\\rm fwhm}}$",
        "loverlEdd": "$L_{\\rm bol}/L_{\\rm Edd}$",
        "log10L5100": "$\\log_{10}(L_{5100}/{\\rm erg~s}^{-1})$",
        "logfwhmsigma": "$\\log_{10}({\\rm FWHM}/\sigma)$",
        "lEddoverMbh": "$l_{\\rm Edd}/M_{\\rm BH}$",
        "lEddoverMbh_quoted": "$l_{\\rm Edd}/M_{\\rm BH}_{\\rm quoted}$",
        "ffwhmoverfsigma": "$f_{\\rm FWHM}/f_\sigma$",
        "log10ffwhmoverfsigma_ccf": "$\\log_{10}(f_{{\\rm fwhm},{\\rm ccf}}/f_{\sigma,{\\rm ccf}})$",
        "log10ffwhmoverfsigma_median": "$\\log_{10}(f_{{\\rm fwhm},{\\rm model}}/f_{\sigma,{\\rm model}})$",
        "ffwhmoverfsigma_median": "$f_{{\\rm fwhm},{\\rm model}}/f_{\sigma,{\\rm model}}$",
        "log10lEddoverMbh": "$\\log_{10}(l_{\\rm Edd}/M_{\\rm BH})$",
        "log10lEddoverMbh_quoted": "$\\log_{10}(l_{\\rm Edd}/M_{\\rm BH})_{\\rm quoted}$",
        "sigmaoverfwhmsquared": "$(\sigma/{\\rm FWHM})^2$",
        "inflowoutflow": "${\\rm In.-Out.~param.}$",
        "log10sigmaoverfwhmsquared": "$\\log_{10}(f_{\\rm fwhm}/f_\sigma)$",
        "dvmeanfwhm": "${\\rm FWHM}_{\\rm mean}$",
        "dvrmsfwhm": "${\\rm FWHM}_{\\rm rms}$",
        "dvmeansigma": "$\\sigma_{\\rm mean}$",
        "dvrmssigma": "$\\sigma_{\\rm rms}$",
        "Tau_ccfminusmedian": "$\\tau_{\\rm ccf} - \\tau_{\\rm median}$",
        "Tau_ccfminusmean": "$\\tau_{\\rm ccf} - \\tau_{\\rm mean}$",
        "feiistrength":"${\\rm Fe~II~Strength}$",
        "RmeanoverRmin":"${\\rm RmeanoverRmin}$",
        "Tauccf":"$\\tau_{\\rm cen}$",
        "angular_sd_orbiting":"$\\sigma_{\\Theta,{\\rm orb}}$",
        "angular_sd_flowing":"$\\sigma_{\\Theta,{\\rm flow}}$",
        "radial_sd_orbiting":"$\\sigma_{\\rho,{\\rm orb}}$",
        "radial_sd_flowing":"$\\sigma_{\\rho,{\\rm flow}}$",
        "epsilon_zero":"$\\varepsilon_0$",
    }
    return names


def paramTexUnits():
    units = {
        "NarrowLineCenter": "",
        "Blurring": "",
        "Mu": "${\\rm light~days}$",
        "mu": "${\\rm light~days}$",
        "Cadd": "${\\rm erg~s}^{-1}{\\rm ~cm}^{-2}{\\rm ~\\AA}^{-2}$",
        "Cmult": "${\\rm erg~s}^{-1}{\\rm ~cm}^{-2}{\\rm ~\\AA}^{-2}$",
        "epsilon_zero": "${\\rm erg~s}^{-1}{\\rm ~\\AA}^{-2}$",
        "Cadd_frac": "",
        'narrow_line_flux': "",
        'narrow_line_flux_nii': "",
        "F": "",
        "alpha": "",
        "Rmax": "${\\rm light~days}$",
        "Rmean": "${\\rm light~days}$",
        "Rmedian": "${\\rm light~days}$",
        "Rmin": "${\\rm light~days}$",
        "Sigmar": "${\\rm light~days}$",
        "Taumean": "${\\rm days}$",
        "Taumedian": "${\\rm days}$",
        "Beta": "",
        "Thetao": "${\\rm degrees}$",
        "Thetai": "${\\rm degrees}$",
        "Kappa": "",
        "Gamma": "",
        "Xi": "",
        "Mbh": "",
        "log10Mbh": "",
        "MbhSinThetai": "",
        "Fellip": "",
        "Fflow": "",
        "Thetae": "${\\rm degrees}$",
        "Sigmaturb": "",
        "log10f_rmssigma": "",
        "log10f_meansigma": "",
        "log10f_meanfwhm": "",
        "log10VP_rmssigma": "",
        "log10VP_meansigma": "",
        "log10VP_meanfwhm": "",
        "log10fsigma_median": "",
        "log10ffwhm_median": "",
        "log10fsigma_ccf": "",
        "log10ffwhm_ccf": "",
        "log10fmeansigma_ccf": "",
        "log10frmssigma_ccf": "",
        "log10fmeanfwhm_ccf": "",
        "loverlEdd": "",
        "log10L5100": "",
        "logfwhmsigma": "",
        "lEddoverMbh": "",
        "lEddoverMbh_quoted": "",
        "ffwhmoverfsigma": "",
        "log10ffwhmoverfsigma_ccf": "",
        "log10ffwhmoverfsigma_median": "",
        "ffwhmoverfsigma_median": "",
        "log10lEddoverMbh": "",
        "log10lEddoverMbh_quoted": "",
        "sigmaoverfwhmsquared": "",
        "inflowoutflow": "",
        "log10sigmaoverfwhmsquared": "",
        "dvmeanfwhm": "${\\rm km s}^{-1]$",
        "dvmeansigma": "${\\rm km s}^{-1]$",
        "dvrmssigma": "${\\rm km s}^{-1]$",
        "Tauccf": "${\\rm days}$",
        "Tau_ccfminusmedian": "${\\rm days}$",
        "Tau_ccfminusmean": "${\\rm days}$",
        "feiistrength": "",
        "RmeanoverRmin": "",
        "angular_sd_orbiting":"",
        "angular_sd_flowing":"",
        "radial_sd_orbiting":"",
        "radial_sd_flowing":"",
    }
    return units


def paramLims():
    lims = {
        "log10Mbh": [5.8, 8.7],
        "loverlEdd": [-2.7, 0.5],
        "Thetao": [0, 90],
        "Thetai": [0, 90],
        "inflowoutflow": [-1.2, 1.2],
        "log10L5100": [41.7, 44.6],
        "Beta": [0, 2],
        "Rmean": [0, 1.5],
        "Rmedian": [0, 40],
        "Rmin": [0, 2.5],
        "MbhSinThetai": [6.1, 7.7],
        "Sigmaturb": [0.0,0.1],
        "Gamma": [1.0,5.0],
        "Kappa": [-0.5,0.5],
        "Xi": [0.0,1.0],
        "Fellip": [0.0,1.0],
        "Fflow": [0.0,1.0],
        "log10f_rmssigma": [-0.7, 2.2],
        "log10f_meanfwhm": [-1.2, 1.3],
        "log10f_meansigma": [-0.8, 2.2],
        "log10VP_rmssigma": [5.2, 7.8],
        "log10VP_meanfwhm": [6.2, 8.4],
        "log10VP_meansigma": [5.7, 7.8],
        "dvrmssigma": [0,5000],
        "dvmeansigma": [0,5000],
        "dvmeanfwhm": [0,5000],
        "dvrmsfwhm": [0,5000],
    }

    return lims


def paramTicksCorrelation():
    ticks = {
        "log10Mbh": [6,7,8],
        "log10L5100": [42, 43, 44],
        "loverlEdd": [-2, -1, 0],
        "inflowoutflow": [-1,0,1],
        "log10f_rmssigma":[-0.5,0,0.5,1,1.5,2.0],
        "log10f_meansigma": [-0.5, 0, 0.5, 1,1.5,2.0],
        "log10f_meanfwhm": [-1.0, -0.5, 0, 0.5, 1],
        "Fellip": [0.0, 0.2, 0.4, 0.6, 0.8, 1.0],
        "Fflow": [0.0, 0.2, 0.4, 0.6, 0.8, 1.0],
        "Xi": [0.0, 0.2, 0.4, 0.6, 0.8, 1.0],
        "Kappa": [-0.4, -0.2, 0.0, 0.2, 0.4],
        "Gamma": [1.0,2.0,3.0,4.0,5.0],
        "Xi": [0.0,0.2,0.4,0.6,0.8,1.0],
        "Beta": [0.0,0.5,1.0,1.5,2.0],
        "Rmedian": [0.0,10,20,30],
        "Thetae": [0, 10, 20, 30, 40, 50, 60, 70, 80, 90],
        "Thetai": [0, 20, 40, 60, 80],
        "Thetao": [0, 20, 40, 60, 80],
        "Sigmaturb": [0.000,0.025,0.05,0.075,0.100],
        "dvmeansigma": [0,1000,2000,3000,4000,5000],
        "dvrmssigma": [0,1000,2000,3000,4000,5000],
        "dvmeanfwhm": [0,1000,2000,3000,4000,5000],
        "dvrmsfwhm": [0,1000,2000,3000,4000,5000],
    }

    return ticks


def paramTicks():
    ticks = {
        "log10Mbh": [6.0,6.5,7.0,7.5,8.0],
        "log10L5100": [42, 43, 44, 45],
        "loverlEdd": [-2, -1, 0],
        "inflowoutflow": [-1,0,1],
        "log10f_rmssigma":[-0.5,0,0.5,1,1.5,2.0],
        "log10f_meansigma": [-1, -0.5, 0, 0.5, 1,1.5,2.0],
        "log10f_meanfwhm": [-1, -0.5, 0, 0.5, 1],
        "Fellip": [0.0, 0.2, 0.4, 0.6, 0.8, 1.0],
        "Fflow": [0.0, 0.2, 0.4, 0.6, 0.8, 1.0],
        "Xi": [0.0, 0.2, 0.4, 0.6, 0.8, 1.0],
        "Kappa": [-0.4, -0.2, 0.0, 0.2, 0.4],
        "Thetae": [0, 10, 20, 30, 40, 50, 60, 70, 80, 90],
        "Thetai": [0, 10, 20, 30, 40, 50, 60, 70, 80, 90],
        "Thetao": [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]
    }

    return ticks


def paramTicksPosteriors():
    ticks = {
        #"log10Mbh": [6.0,6.5,7.0,7.5,8.0],
        "log10L5100": [42, 43, 44, 45],
        "loverlEdd": [-2, -1, 0],
        "inflowoutflow": [-1,-0.5,0,0.5,1],
        "log10f_rmssigma":[-0.5,0,0.5,1,1.5,2.0],
        "log10f_meansigma": [-1, -0.5, 0, 0.5, 1,1.5,2.0],
        "log10f_meanfwhm": [-1, -0.5, 0, 0.5, 1],
        "Fellip": [0.0, 0.2, 0.4, 0.6, 0.8, 1.0],
        "Fflow": [0.0, 0.2, 0.4, 0.6, 0.8, 1.0],
        "Gamma": [1, 2, 3, 4, 5],
        "Xi": [0.0, 0.2, 0.4, 0.6, 0.8, 1.0],
        "Kappa": [-0.4, -0.2, 0.0, 0.2, 0.4],
        "Thetae": [0, 20, 40, 60, 80],
        "Thetai": [0, 20, 40, 60, 80],
        "Thetao": [0, 20, 40, 60, 80],
        "Sigmaturb": [-3, -2.5, -2, -1.5, -1]
    }

    return ticks


def paramDigits():
    ndigits = {
        "Cadd": 2,
        "Cmult": 2,
        "alpha": 2,
        "epsilon_zero": 2,
        "Rmax": 1,
        "Rmean": 2,
        "Rmedian": 2,
        "Rmin": 2,
        "Sigmar": 2,
        "Taumean": 2,
        "Taumedian": 2,
        "Beta": 2,
        "Thetao": 1,
        "Thetai": 1,
        "Kappa": 2,
        "Gamma": 2,
        "Xi": 2,
        "Mbh": 2,
        "log10Mbh": 2,
        "Fellip": 2,
        "Fflow": 2,
        "Thetae": 1,
        "Sigmaturb": 3,
        "loverlEdd": 3,
        "log10f_rmssigma":2,
        "log10f_meansigma":2,
        "log10f_meanfwhm":2,
        "Tauccf":2
    }
    return ndigits


def paramPlottingLims():
    plotting_lims = {
        "Mbh": None,
        "log10Mbh": None,
        "Rmedian": None,
        "Rmean": None,
        "Beta": None,
        "Rmin": None,
        "inflowoutflow": [-1,1],
        "Taumean": None,
        "Sigmaturb": [0.001,0.1],
        "Sigmar": None,
        "Thetao": [0, 90],
        "Thetai": [0, 90],
        "Kappa": [-0.5, 0.5],
        "Xi": [0, 1],
        "Gamma": [1, 5],
        "Fellip": [0, 1],
        "Fflow": [0, 1],
        "Thetae": [0, 90]
    }

    return plotting_lims


def commandTexNames():
    commandtexnames = {
        "Cadd_frac": "caddfrac",
        "alpha": "alpha",
        "Cadd": "cadd",
        "Cmult": "cmult",
        "Rmax": "rmax",
        "epsilon_zero": "epsilonzero",
        "log10Mbh": "logmbh",
        "Thetao": "thetao",
        "Thetai": "thetai",
        "MbhSinThetai": "msini",
        "log10f_rmssigma": "logfrmssigma",
        "log10f_meansigma": "logfmeansigma",
        "log10f_meanfwhm": "logfmeanfwhm",
        "loverlEdd": "loverledd",
        "log10L5100": "logl",
        "inflowoutflow": "inflowoutflow",
        "feiistrength":"feiistrength",
        "Rmean": "rmean",
        "Rmedian":"rmedian",
        "Rmin":"rmin",
        "Sigmar":"sigmar",
        "Taumean":"taumean",
        "Taumedian":"taumedian",
        "Beta":"beta",
        "Kappa":"kappa",
        "Gamma":"gamma",
        "Xi":"xi",
        "Fellip":"fellip",
        "Fflow":"fflow",
        "Thetae":"thetae",
        "Sigmaturb":"sigmaturb",
        "Tauccf":"tauccf"
    }

    return commandtexnames
